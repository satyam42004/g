#include <iostream>
using namespace std;

struct Node   //NOde Structure
{
    string name;
    struct Node *ch1;
    struct Node *ch2;
    struct Node *ch3;
}*Root,*Ch;

void createTree()  //function to create General Tree
{
    struct Node *temp;
    temp = new struct Node;   //memory allocation
    cout<<"\n\n Enter the Book Name : ";    //Insert data, pointers initialise
    cin>>temp->name;
    temp->ch1 = NULL;
    temp->ch2 = NULL;
    temp->ch3 = NULL;

    if(Root == NULL)   //attach New Node in tree
    {
        Root = temp;
    }
}

void displayTree()    //display function 
{
    if(Root)
    {
        cout<<"\n\n Book Name : "<<Root->name;
    }
    Ch = Root->ch1;
    if(Ch)
    {
        cout<<"\n\n Chapter 01 : "<<Ch->name;
        if(Ch->ch1)
        {
            cout<<"\n\n Section 01 : "<<Ch->ch1->name;
        }
        if(Ch->ch2)
        {
            cout<<"\n\n Section 02 : "<<Ch->ch2->name;
        }
        if(Ch->ch3)
        {
            cout<<"\n\n Section 03 : "<<Ch->ch3->name;
        }
    }
    Ch = Root->ch2;
    if(Ch)
    {
        cout<<"\n\n Chapter 02 : "<<Ch->name;
        if(Ch->ch1)
        {
            cout<<"\n\n Section 01 : "<<Ch->ch1->name;
        }
        if(Ch->ch2)
        {
            cout<<"\n\n Section 02 : "<<Ch->ch2->name;
        }
        if(Ch->ch3)
        {
            cout<<"\n\n Section 03 : "<<Ch->ch3->name;
        }
    }
    Ch = Root->ch3;
    if(Ch)
    {
        cout<<"\n\n Chapter 03 : "<<Ch->name;
        if(Ch->ch1)
        {
            cout<<"\n\n Section 01 : "<<Ch->ch1->name;
        }
        if(Ch->ch2)
        {
            cout<<"\n\n Section 02 : "<<Ch->ch2->name;
        }
        if(Ch->ch3)
        {
            cout<<"\n\n Section 03 : "<<Ch->ch3->name;
        }
    }
}

void insertChapter()   //Function to insert chapters in Book
{
    struct Node *temp;
    temp = new struct Node;
    cout<<"\n\n Enter Chapter Name : ";
    cin>>temp->name;
    temp->ch1 = NULL;
    temp->ch2 = NULL;
    temp->ch3 = NULL;

    if(Root->ch1 == NULL)   //Attach New Node in TREE
    {
        Root->ch1 = temp;
    }
    else if(Root->ch2 == NULL)
    {
        Root->ch2 = temp;
    }
    else if(Root->ch3 == NULL)
    {
        Root->ch3 = temp;
    }
    else
    {
        cout<<"\n\n No More chapter can be added";
    }
}

void insertSection() //function to Insert SEctions in Chapters of Book
{
    struct Node *temp;
    temp = new struct Node;  //Allocate memory

    cout<<"\n\n Enter Section Name : ";  //Insert Data and initializes pointers
    cin>>temp->name;
    temp->ch1 = NULL;
    temp->ch2 = NULL;
    temp->ch3 = NULL;

    if(Ch->ch1 == NULL)     //attach new node in tree
    {
        Ch->ch1 = temp;
    }
    else if(Ch->ch2 == NULL)
    {
        Ch->ch2 = temp;
    }
    else if(Ch->ch3 == NULL)
    {
        Ch->ch3 = temp;
    }
    else
    {
        cout<<"\n\n No More section can be added ";
    }
}

void insertSectionMenu()
{
    int ch;
    cout<<"\n\n Enter the section of the chapters (1/2/3) : ";
    cin>>ch;
    switch (ch)
    {
    case 1:
        Ch = Root->ch1;
        insertSection();
        insertSection();
        insertSection();
        break;
    case 2:
        Ch = Root->ch2;
        insertSection();
        insertSection();
        insertSection();
        break;
    case 3:
        Ch = Root->ch3;
        insertSection();
        insertSection();
        insertSection();
        break;
    
    default:
        break;
    }
}

//main function
int main()
{
    cout<<"\n---------A C++ Program to implement General Tree----------";
        Root = NULL;

    createTree();

    insertChapter();
    insertChapter();
    insertChapter();

    insertSectionMenu();
    insertSectionMenu();
    insertSectionMenu();

    displayTree();

    return 0;
}
*/
Definition:
A tree T is a set of nodes storing elements such that the nodes have a parent-child relationship that
satisfies the following
• if T is not empty, T has a special tree called the root that has no parent
• each node v of T different than the root has a unique parent node w; each node with parent w is a child of
tree.
A node that has no child is called a leaf, and that node is of course at the bottommost level of the tree. The
height of a node is the length of the longest path to a leaf from that node. The height of the root is the
height of the tree. In other words, the "height" of tree is the "number of levels" in the tree. Or more
formally, the height of a tree is defined as follows:
1. The height of a tree with no elements is 0
2. The height of a tree with 1 element is 1
3. The height of a tree with > 1 element is equal to 1 + the height of its tallest subtree.
The depth of a node is the length of the path to its root (i.e., its root path). Every child node is always one
level lower than his parent. The topmost node in a tree is called the root node. Being the topmost node, the
root node will not have parents. It is the node at which operations on the tree commonly begin (although
some algorithms begin with the leaf nodes and work up ending at the root). All other nodes can be reached
from it by following edges or links. (In the formal definition, a path from a root to a node, for each
different node is always unique). In diagrams, it is typically drawn at the top.
/*

